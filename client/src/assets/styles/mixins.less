// .font-face('Roboto', 'Roboto-Light', 300, normal)
.font-face(@font-name, @font-path, @weight, @style) {
    font-family: @font-name;
    src: url('../fonts/@{font-path}.woff2') format('woff2'),
        url('../fonts/@{font-path}.woff') format('woff');
    font-weight: @weight;
    font-style: @style;
    font-display: swap;
}

.truncate-text(@rows) {
	display: -webkit-box;
	-webkit-line-clamp: @rows;
	-webkit-box-orient: vertical;
	overflow: hidden;
}

.square(@size) {
	width: @size;
	height: @size;
}

.circle(@size, @color) {
	width: @size;
	height: @size;
	border-radius: 50%;
	background-color: @color;
}

.fill-parent() {
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
}

.fill-image-container() {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	min-width: 100%;
	min-height: 100%;
	height: auto;
	width: auto;
}

.absolute-centered() {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

.overflow-ellipsis {
	text-overflow: ellipsis;
	white-space: nowrap;
	overflow: hidden;
}

.listreset() {
	list-style-type: none;
	padding: 0;
	margin: 0;
}

.breakpoint(@size, @rules, @mediafeature:max-width) {
	@mediaQuery: ~"screen and (@{mediafeature}: @{size})";

	@media @mediaQuery {
		@rules();
	}
}

.media-set(@prop, @forHighQuery, @forLessQuery, @size) {
	@{prop}: @forHighQuery;
	.breakpoint(@size, {
        @{prop}: @forLessQuery;
    });
}

.flex-justify-center {
	display: flex;
	flex-wrap: wrap;
	justify-content: center;
}
